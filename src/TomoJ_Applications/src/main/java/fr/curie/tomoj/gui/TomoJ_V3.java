package fr.curie.tomoj.gui;

import com.intellij.uiDesigner.core.GridLayoutManager;
import fr.curie.tomoj.application.CrossCorrelationParameters;
import fr.curie.tomoj.tomography.AnglesForTiltSeries;
import fr.curie.tomoj.tomography.TiltSeries;
import fr.curie.tomoj.tomography.TomoJPoints;
import ij.IJ;
import ij.ImagePlus;
import ij.Prefs;
import ij.gui.ImageCanvas;
import ij.gui.Roi;
import ij.gui.ScrollbarWithLabel;
import ij.gui.StackWindow;
import ij.plugin.PlugIn;
import ij.process.StackConverter;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;

public class TomoJ_V3 implements PlugIn {
    TiltSeries ts1;
    CrossCorrelationParameters cc;

    @Override
    public void run(String s) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        ImagePlus imp = IJ.getImage();
        System.out.println(imp.getTitle());
        System.out.flush();
        ts1 = convertToTiltSeries(imp);
        ts1.show();
        System.out.println("conversion tilt series done");
        System.out.flush();

        cc = new CrossCorrelationParameters(ts1);


        CustomStackWindowDual window = new CustomStackWindowDual();
        window.pack();
        window.show();


    }

    public TiltSeries convertToTiltSeries(ImagePlus imp) {
        if (imp.getType() != ImagePlus.GRAY32) new StackConverter(imp).convertToGray32();
        double[] tiltangles = AnglesForTiltSeries.getAngles(imp);
        if (tiltangles == null) {
            return null;
        }
        System.out.println("get angles done");
        TiltSeries ts = new TiltSeries(imp, tiltangles);
        System.out.println("create tilt series done");
        TomoJPoints tp = new TomoJPoints(ts);
        System.out.println("create points done");
        tp.setVisible(true);
        ts.setTomoJPoints(tp);
        Roi emptyRoi = null;
        ts.setRoi(emptyRoi);


        ts.setNormalizationType((int) Prefs.get("TOMOJ_TiltSeriesNormalizationType.int", 1));
        ts.setFillType((int) Prefs.get("TOMOJ_TiltSeriesFillBlankType.int", 0));
        ts.setSlice(imp.getSlice());
        ts.resetDisplayRange();
        ts.updateAndDraw();
        return ts;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }

    class CustomStackWindowDual extends StackWindow {
        Panel panel;
        int currentTiltSeries = 0;
        JPanel imgPanel;
        JPanel imgPanel2;
        ArrayList<TiltSeriesPanel> tsList;
        ImageCanvas bkpCanvas;
        ScrollbarWithLabel bkpScrollbar;

        CustomStackWindowDual() {
            super(ts1, ts1.getCanvas());
            setLayout(new FlowLayout());
            remove(zSelector);
            remove(ic);
            bkpCanvas = ic;
            bkpScrollbar = zSelector;
            double magnification = ic.getMagnification();
            Rectangle displayArea = ic.getSrcRect();
            Dimension currentCanvasDimension = ic.getPreferredSize();
            removeAll();
            ic = bkpCanvas;
            zSelector = bkpScrollbar;
            animationSelector = zSelector;
            setImage(ts1);
            ic.setSourceRect(displayArea);
            ic.setMagnification(magnification);
            ic.setSize(currentCanvasDimension);
            JPanel tmp = new JPanel();
            tmp.setLayout(new BoxLayout(tmp, BoxLayout.Y_AXIS));
            tmp.add(ic);
            tmp.add(zSelector);
            add(tmp);
            if (panel != null) add(panel);
            else {
                panel = new Panel();
                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
                panel.add(cc.getJPanel());
                Button ccb = new Button("run");
                ccb.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        cc.run();
                        if (tsList == null) tsList = new ArrayList<TiltSeriesPanel>();
                        tsList.add(new TiltSeriesPanel(ts1));
                        System.out.println("create a tilt series panel");
                        System.out.flush();
                        panel.add(tsList.get(tsList.size() - 1).getProcessingPanel());
                        pack();

                    }
                });
                panel.add(ccb);
                add(panel);

            }
            panel.setPreferredSize(new Dimension((int) panel.getPreferredSize().getWidth(), (int) currentCanvasDimension.getHeight()));
            pack();

            this.addKeyListener(IJ.getInstance());
        }


        public int getImageCanvasHeight() {
            return ic.getHeight();
        }


        @Override
        public void windowClosed(WindowEvent e) {
            super.windowClosed(e);
            System.out.println("window closed");
            for (TiltSeriesPanel ts : tsList) {
                ts.getTiltSeries().close();
            }
        }

        @Override
        public void windowClosing(WindowEvent e) {
            super.windowClosing(e);
            System.out.println("window closing");
            for (TiltSeriesPanel ts : tsList) {
                ts.getTiltSeries().getWindow().close();
            }

        }
    } // CustomStackWindow inner class

}
