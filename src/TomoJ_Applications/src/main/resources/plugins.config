#TomoJ plugins.config
# Generate the jar file using: "jar cvfM jar_demo.jar *"


Plugins>TomoJ, " TomoJ V3 dual beta", fr.curie.tomoj.gui.TomoJ_v3_Dual("")
Plugins>TomoJ, " TomoJ V3", fr.curie.tomoj.gui.TomoJ_V3("")
Plugins>TomoJ>Filters,"Aberrant_pixel_removal", fr.curie.filters.HotSpot_Detection("")
Plugins>TomoJ>Filters,"Elongation_Correction_Tomography",fr.curie.filters.Elongation_Correction_Tomography("")
#Plugins>TomoJ>Filters,"MSDFilter", fr.curie.filters.MSD_Filter("")
#Plugins>TomoJ>Filters,"ApplySymmetry_Filter", fr.curie.filters.ApplySymmetry_Filter("")
Plugins>TomoJ>Filters,"BandPass_Filter2D", fr.curie.filters.BandPass_Filter2D("")
Plugins>TomoJ>Filters,"DetectGoldBead", fr.curie.tomoj.application.GoldBeadDetector_Filter("")
Plugins>TomoJ>Utils, "Box3D_Extractor", fr.curie.filters.Box3D_Extractor("")
Plugins>TomoJ>Utils, "projection",fr.curie.plugins.Project_Volume("")
Plugins>TomoJ>Utils, "test new model",fr.curie.plugins.newModelTester("")
#Plugins>TomoJ>Filters, "FocusSeriesSimulation",fr.curie.filters.Focus_Series_Simulation("")
Plugins>PlotJ, Plugins>PlotJ, "PlotJ",fr.curie.plotj.PlotJ_("")
Plugins>TomoJ>Utils, "Simulate Sparsity", fr.curie.filters.Simulate_Sparsity("")
Plugins>TomoJ>Utils, "upscalex2withNaN", fr.curie.filters.upscaleX2("")

Plugins>TomoJ>Filters,"ROF_Denoising",fr.curie.filters.Total_Variation_Denoising("")
Plugins>TomoJ>Filters,"TVM_Denoising 3D",fr.curie.filters.TotalVariationDenoising_3D("")
Plugins>TomoJ>Filters,"TVM_Denoising 3D (GPU)",fr.curie.gpu.plugins.TotalVariationDenoising_3D("")
Plugins>TomoJ>Filters,"Blur_borders",fr.curie.filters.Blur_Borders("")
Plugins>TomoJ>Filters,"highpass test",fr.curie.gpu.plugins.FFT_OCL("")
#Plugins>TomoJ>Filters,"entropy test",fr.curie.filters.entropy_test("")
#Plugins>TomoJ>Filters, "harris corner", fr.curie.filters.HarrisCornerDetection("")
Plugins>TomoJ>Resolution, "FSC", fr.curie.plugins.FSC_("")
Plugins>TomoJ>Resolution, "GoldBead quality assessment", fr.curie.plugins.GoldBead_QualityAssessment("")
#Plugins>TomoJ>Resolution, "test", tomoj.filters.Test_("")
#!Plugins>TomoJ>Filters, "testInpaint", tomoj.filters.Test_Inpaint("")
Plugins>TomoJ>Filters, "upscaleDCCI", fr.curie.filters.UpscaleX2_DCCI("")

#!Plugins>TomoJ>Utils, "testDual", v3.tomoj.gui.TomoJ_Dual("")
Plugins>TomoJ>Utils, "Similarity Measure", fr.curie.plugins.Measure_SimilarityMetricsBetween2Images("")

Plugins>TomoJ>Resolution, "single Image FRC", fr.curie.plugins.SingleImageFRC("")


#plugins for import/export in MRC format
File>Import, "MRC reader", inputoutput.MRC_Reader("")
File>Save As, "MRC writer", inputoutput.MRC_Writer("")

#plugins for import in MRC.BZ2 format
File>Import, "MRC.BZ2 reader", inputoutput.MRC_BZ2_Reader("")


#plugins for import/export in Spider format
File>Import, "Spider reader", inputoutput.Spider_Reader("")
File>Save As, "Spider writer", inputoutput.Spider_Writer("")

#plugins for import/export in em format
File>Import, "EM reader", inputoutput.EM_Reader("")
File>Save As, "EM writer", inputoutput.EM_Writer("")

#plugins for import/export in sel format (multiple image files -spider format when writing- plus a text file with the list)
File>Import, "Sel reader", inputoutput.Sel_Reader("")
File>Save As, "Sel writer", inputoutput.Sel_Writer("")
