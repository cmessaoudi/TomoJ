/*
 * Copyright 2010 Nick Aschman.
 */

package fr.curie.eftemtomoj.gui;

import fr.curie.eftemtomoj.EftemDataset;
import fr.curie.eftemtomoj.FilteredImage;
import fr.curie.eftemtomoj.MSANoiseFilterBonnet;
import ij.IJ;
import ij.ImageStack;
import ij.gui.Roi;
import ij.process.Blitter;
import ij.process.ImageProcessor;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

//import utils.Chrono;

/**
 * @author Nick Aschman
 */
public class DenoisingPanel extends WizardPage {

    JComboBox msaMethodComboBox;
    JButton msaApplyButton;
    JRadioButton manualRadioButton;
    JRadioButton semiAutomaticRadioButton;
    //JButton hotSpotApplyButton;
    JComboBox filterComboBox;

    //JButton previewButton;
    //JSlider radiusSlider;
    //JTextField radiusTextField;
    //JCheckBox includeColdSpotsCheckBox;
    JPanel panel1;

    private boolean dataModified = false;


    public DenoisingPanel(WizardDialog dlg) {
        super(dlg, "DENOISING_PAGE", "Remove Noise");

        $$$setupUI$$$();
        /* hotSpotApplyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                final eftemtomoj.EftemDataset ds = dialog.getCurrentDataset();
                TiltSeries[] ts = ds.getTiltSeries();
                System.out.println("hot spot removal with radius of " + radiusSlider.getValue());
                for (int i = 0; i < ts.length; i++) {
                    ImagePlus tmp = new ImagePlus("tmp", ts[i]);

                    IJ.run(tmp, "HotSpot Detection", "radius=" + radiusSlider.getValue() + " stack");


                }

            }
        });
        hotSpotApplyButton.setEnabled(true);*/
        msaApplyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                //onMsaFilterAnalyse();
                onMSABonnet();
                IJ.showStatus("multivariate analysis finished");
                System.out.println("multivariate analysis finished");
            }
        });
        /*radiusTextField.setEnabled(true);
       radiusSlider.addChangeListener(new ChangeListener() {
           public void stateChanged(ChangeEvent e) {
               radiusTextField.setText("" + radiusSlider.getValue());
           }
       }); */

        // Create lists of denoising filters
        msaMethodComboBox.setModel(new DefaultComboBoxModel(new String[]{"Principal Components Filter", "Correspondance Analysis Filter"}));
        filterComboBox.setModel(new DefaultComboBoxModel(new String[]{"(none implemented)"}));

        /*hotSpotApplyButton.setEnabled(false);
        radiusSlider.setEnabled(false);
        radiusTextField.setEnabled(false);*/
        semiAutomaticRadioButton.setSelected(true);
    }

    private void createUIComponents() {
        msaMethodComboBox = new JComboBox();
        filterComboBox = new JComboBox();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(8, 5, new Insets(0, 0, 0, 0), -1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font(label1.getFont().getName(), Font.BOLD, label1.getFont().getSize()));
        label1.setText("Multivariate statistical analysis");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Method:");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        msaApplyButton = new JButton();
        msaApplyButton.setText("Apply");
        panel1.add(msaApplyButton, new com.intellij.uiDesigner.core.GridConstraints(5, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        /*final JLabel label3 = new JLabel();
        label3.setFont(new Font(label3.getFont().getName(), Font.BOLD, label3.getFont().getSize()));
        label3.setText("Hot-spot removal");
        panel1.add(label3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        */
        /*final JSeparator separator1 = new JSeparator();
        panel1.add(separator1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        */
        final JLabel label4 = new JLabel();
        label4.setText("Axes selection:");
        panel1.add(label4, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(msaMethodComboBox, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(5, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        manualRadioButton = new JRadioButton();
        manualRadioButton.setText("Manual");
        manualRadioButton.setSelected(true);
        panel2.add(manualRadioButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        panel2.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        semiAutomaticRadioButton = new JRadioButton();
        semiAutomaticRadioButton.setText("Semi-automatic");
        panel2.add(semiAutomaticRadioButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        /*final JLabel label5 = new JLabel();
        label5.setText("Radius:");
        panel1.add(label5, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        */
        /*final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        */
        /*radiusSlider = new JSlider();
        radiusSlider.setMaximum(10);
        radiusSlider.setMinimum(1);
        radiusSlider.setPaintLabels(false);
        radiusSlider.setPaintTicks(false);
        radiusSlider.setPaintTrack(true);
        radiusSlider.setSnapToTicks(true);
        radiusSlider.setValue(2);
        panel3.add(radiusSlider, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        radiusTextField = new JTextField();
        radiusTextField.setColumns(4);
        radiusTextField.setEditable(false);
        radiusTextField.setText("" + radiusSlider.getValue());
        panel3.add(radiusTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        previewButton = new JButton();
        previewButton.setText("Preview");
        panel1.add(previewButton, new com.intellij.uiDesigner.core.GridConstraints(1, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        hotSpotApplyButton = new JButton();
        hotSpotApplyButton.setText("Apply");
        panel1.add(hotSpotApplyButton, new com.intellij.uiDesigner.core.GridConstraints(2, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        */
        label2.setLabelFor(msaMethodComboBox);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(manualRadioButton);
        buttonGroup.add(semiAutomaticRadioButton);

        /*radiusSlider.setEnabled(true);
        hotSpotApplyButton.setEnabled(true); */


    }

    @Override
    public JComponent getComponent() {
        return panel1;
    }

    @Override
    public boolean validate() {
        if (!dataModified) {
            return true;
        }

        // Save denoised stack
        dialog.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        dialog.getCurrentDataset().save("denoised");
        dialog.setCursor(Cursor.getDefaultCursor());

        return true;
    }

    @Override
    public void activate() {
        dataModified = false;
        //setMsaFilterResult(null);
    }


    private void onMSABonnet() {
        //final Chrono time = new Chrono();
        final EftemDataset ds = dialog.getCurrentDataset();
        final MSANoiseFilterBonnet[] msa = new MSANoiseFilterBonnet[ds.getTiltCount()];
        final Future[] ftab = new Future[ds.getTiltCount()];
        final ExecutorService exec = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
        final int algo = msaMethodComboBox.getSelectedIndex();
        final Roi[] rois = new Roi[ds.getTiltCount()];
        //time.start();
        for (int i = 0; i < msa.length; i++) {
            FilteredImage[] fis = ds.getMappingImages(i);
            rois[i] = getCommonRoi(fis, ds.getZeroOffset());
            ImageStack is = new ImageStack((int) rois[i].getBounds().getWidth(), (int) rois[i].getBounds().getHeight());
            for (int j = 0; j < fis.length; j++) {
                ImageProcessor ip = fis[j].getImage();
                ip.setRoi(rois[i]);
                is.addSlice("" + fis[j].getEnergyShift(), ip.crop());
            }
            final int nbaxes = (algo == 0) ? fis.length : fis.length - 1;
            msa[i] = new MSANoiseFilterBonnet(is, nbaxes);
            final int index = i;
            ftab[i] = exec.submit(new Runnable() {
                public void run() {
                    String displ = "";
                    if (algo == 0) displ += msa[index].PCA();
                    else if (algo == 1) displ += msa[index].CA();
                    System.out.println("image " + index + " tilt " + ds.getTiltAngle(index) + "\n" + displ);
                }
            });
        }
        try {
            for (int j = 0; j < ds.getTiltCount(); j++) {
                ftab[j].get();
            }
        } catch (ExecutionException ex) {
            ex.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        //time.stop();
        //System.out.println("msa computing time " + time.delayString());
        //now ask for axes
        boolean manual = manualRadioButton.isSelected();
        //time.start();
        MsaParameterDialog selectionDialog = new MsaParameterDialog(dialog, msa, manual) {
            @Override
            protected void onAccepted() {
                for (int i = 0; i < ftab.length; i++) {
                    final int index = i;
                    ftab[i] = exec.submit(new Runnable() {
                        public void run() {
                            ImageStack rec = null;
                            if (algo == 0) rec = msa[index].PCA_rec();
                            else if (algo == 1) rec = msa[index].CA_rec();
                            System.out.println("size of rec " + rec.getSize());
                            FilteredImage[] fis = ds.getMappingImages(index);
                            int size = rec.getWidth() * rec.getHeight();
                            for (int i = 0; i < fis.length; i++) {
                                ImageProcessor ip = fis[i].getImage();
                                ImageProcessor recp = rec.getProcessor(i + 1);
                                ip.copyBits(recp, (int) rois[i].getBounds().getX(), (int) rois[i].getBounds().getY(), Blitter.COPY);
                                /*for (int j = 0; j < size; j++)
                                    ip.setf(j, recp.getf(j)); */
                            }
                        }
                    });
                }
                try {
                    for (int j = 0; j < ds.getTiltCount(); j++) {
                        ftab[j].get();
                    }
                } catch (ExecutionException ex) {
                    ex.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
        };
        //time.stop();
        //System.out.println("time to create projections " + time.delayString());

        selectionDialog.setVisible(true);
        System.out.println("algo used " + algo);
        //now reconstruct images

    }

    private Roi getCommonRoi(FilteredImage[] fis, double zeroOffset) {
        ImageProcessor ip = fis[0].getImage();
        int xmin = 0;
        int xmax = ip.getWidth();
        int ymin = 0;
        int ymax = ip.getHeight();
        int cx = ip.getWidth() / 2;
        int cy = ip.getHeight() / 2;

        for (FilteredImage fi : fis) {
            ip = fi.getImage();
            int index = 0;
            while (index < ip.getWidth() && ip.getPixelValue(index, cy) == zeroOffset) index++;
            index--;
            xmin = Math.max(xmin, index);

            index = 0;
            while (index < ip.getHeight() && ip.getPixelValue(cx, index) == zeroOffset) index++;
            index--;
            ymin = Math.max(ymin, index);

            index = ip.getWidth() - 1;
            while (index >= 0 && ip.getPixelValue(index, cy) == zeroOffset) index--;
            index++;
            xmax = Math.min(xmax, index);

            index = ip.getHeight() - 1;
            while (index >= 0 && ip.getPixelValue(cx, index) == zeroOffset) index--;
            index++;
            ymax = Math.min(ymax, index);

        }
        /*System.out.println("common roi ["+xmin+", "+ymin+", "+xmax+", "+ymax+"]");
        try{
            System.in.read();
        } catch (Exception e){

        }*/
        return new Roi(xmin, ymin, xmax - xmin, ymax - ymin);
        //return new Roi(0,0,ip.getWidth(),ip.getHeight());
    }

}
